
#Область ОписаниеОбработки

// Коммерческое использование запрещено.
// Встраивание в коммерческие продукты допустимо только с указанием в модуле формы ссылки на источник скачивания обработки.

#КонецОбласти

#Область ОписаниеПеременных

// Переменная для хранения соответствия 
&НаКлиенте
Перем ВыбранныеЦвета;

&НаКлиенте
Перем ТЦветовПриАктивизацииСтрокиОтказ;

&НаКлиенте
Перем ТЦветовПлиткойПриАктивизацииЯчейкиОтказ;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекОбъектМетаданныеИмя = РеквизитФормыВЗначение("Объект").Метаданные().Имя;
	
	#Если МобильныйКлиент Тогда
		Для Каждого Элемент Из Элементы Цикл
			Если СтрЗаканчиваетсяНа("_Связь") Тогда
				Элемент.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	МножественныйВыбор = Параметры.МножественныйВыбор;
	
	Если ТипЗнч(Параметры.Заголовок) = Тип("Строка") Тогда
		ЭтаФорма.Заголовок = Параметры.Заголовок;
	Иначе
		Если Не МножественныйВыбор Тогда
			ЭтаФорма.Заголовок = НСтр("ru = 'Выбор цвета'; en = 'Color choose'");
			Элементы.Выбрать.Заголовок = НСтр("ru = 'Выбрать'; en = 'Choose'");
		Иначе
			ЭтаФорма.Заголовок = НСтр("ru = 'Выбор цветов'; en = 'Color choose'");
			Элементы.Выбрать.Заголовок = НСтр("ru = 'Готово'; en = 'Done'");
		КонецЕсли;
	КонецЕсли;
	
	МаксимальноеКоличествоРезультатовПоиска = Параметры.МаксимальноеКоличествоРезультатовПоиска;
	Если МаксимальноеКоличествоРезультатовПоиска <= 0 Тогда
		МаксимальноеКоличествоРезультатовПоиска = 15;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.КоличествоКолонокЦветовВТаблицеЦветовПлиткой) Тогда
		ТЦветовПлиткойКолКолонок = Параметры.КоличествоКолонокЦветовВТаблицеЦветовПлиткой;
	Иначе
		ТЦветовПлиткойКолКолонок = 4;
	КонецЕсли;
	ИнициализироватьТаблицуЦветовПлиткой();
	
	ЗагрузитьСписокПалитр();
	Если Элементы.ТекПалитраЦветов.СписокВыбора.Количество() Тогда
		ТекПалитраЦветов = Элементы.ТекПалитраЦветов.СписокВыбора[0].Значение;
		ЗагрузитьТекПалитруЦветов();
	КонецЕсли;
	
	РежимОтображенияСписокВыбора = Элементы.РежимОтображения.СписокВыбора;
	Если РежимОтображенияСписокВыбора.Количество() > 0 Тогда
		РежимОтображения = РежимОтображенияСписокВыбора[0].Значение;
	КонецЕсли;
	УстановитьТекущуюСтраницу(ЭтаФорма);
	
	Элементы.ТЦветовВыбор.Видимость = МножественныйВыбор;
	Элементы.ТЦветовУстановитьПометки.Видимость = МножественныйВыбор;
	Элементы.ТЦветовСнятьПометки.Видимость = МножественныйВыбор;
	Элементы.ТЦветовПлиткойУстановитьПометки.Видимость = МножественныйВыбор;
	Элементы.ТЦветовПлиткойСнятьПометки.Видимость = МножественныйВыбор;
	
	Если ТипЗнч(Параметры.ТекущийЦвет) = Тип("Цвет") Тогда
		УстановитьНовыйТекЦвет(ЭтаФорма, Параметры.ТекущийЦвет);
	КонецЕсли;
	
	ОбразецЦветаФона = НСтр("ru = 'Пример фона'; en = 'Background sample'");
	ОбразецЦветаТекста = НСтр("ru = 'Пример текста'; en = 'Text sample'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТЦветовПриАктивизацииСтрокиОтказ = Ложь;
	ТЦветовПлиткойПриАктивизацииЯчейкиОтказ = Ложь;
	
	ВыбранныеЦвета = Новый Соответствие;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗначения = СтрРазделить(ВыбранноеЗначение, " ");
	ИмяМакетаПалитры = ДанныеЗначения[0];
	ПалитраНомерЦветаППКакСтрока = ДанныеЗначения[1];
	ПалитраНомерЦветаПП = Число(ПалитраНомерЦветаППКакСтрока);
	
	ТекПалитраЦветов = ИмяМакетаПалитры;
	ЗагрузитьТекПалитруЦветов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора =
		ПолучитьДанныеДляАвтоподбора(
			Текст,
			ТекПалитраЦветов,
			ТекОбъектМетаданныеИмя,
			МаксимальноеКоличествоРезультатовПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекПалитраЦветовПриИзменении(Элемент)
	ЗагрузитьТекПалитруЦветов();
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияПриИзменении(Элемент)
	УстановитьТекущуюСтраницу(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТЦветовНавигацияПриАктивизации(Элемент)
	
	ТЦветовНавигацияВыделенныеЭлементы = Элементы.ТЦветовНавигация.ПолучитьВыделенныеЭлементы();
	Если Не ТЦветовНавигацияВыделенныеЭлементы.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТЦветовНомерСтроки =
		Мин(ТекПалитраЦветовКолЦветов,
			ТекПалитраЦветовКолЦветов
			- ТЦветовНавигация.Серии.Индекс(ТЦветовНавигацияВыделенныеЭлементы[0].Серия));
	
	ТЦветовИндексСтроки = ТЦветовНомерСтроки - 1;
	ТЦветовИДСтроки = ТЦветов[ТЦветовИндексСтроки].ПолучитьИдентификатор();
	
	Элементы.ТЦветовНавигация.УстановитьВыделенныеЭлементы(Новый Массив);
	Элементы.ТЦветов.ТекущаяСтрока = ТЦветовИДСтроки;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ТЦветов;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЦветовПлиткойНавигацияПриАктивизации(Элемент)
	
	ТЦветовПлиткойНавигацияВыделенныеЭлементы =
		Элементы.ТЦветовПлиткойНавигация.ПолучитьВыделенныеЭлементы();
	Если Не ТЦветовПлиткойНавигацияВыделенныеЭлементы.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТЦветовИндексСерии = ТЦветовПлиткойНавигация.Серии.Индекс(ТЦветовПлиткойНавигацияВыделенныеЭлементы[0].Серия);
	ТЦветовИндексСтроки = ТекПалитраЦветовКолЦветов - 1 - ТЦветовИндексСерии;
	ТЦветовНомерСтроки = ТЦветовИндексСтроки + 1;
	
	Элементы.ТЦветовПлиткойНавигация.УстановитьВыделенныеЭлементы(Новый Массив);
	
	Если ТЦветовНомерСтроки > ТекПалитраЦветовКолЦветов Тогда
		Возврат;
	КонецЕсли;
	
	ТЦветовПлиткойНомерСтроки =
		Окр(ТЦветовНомерСтроки / ТЦветовПлиткойКолКолонок + 0.5, 0, 0);
	ТЦветовПлиткойИндексСтроки = ТЦветовПлиткойНомерСтроки - 1;
	ТЦветовПлиткойИДСтроки = ТЦветовПлиткой[ТЦветовПлиткойИндексСтроки].ПолучитьИдентификатор();
	ТЦветовПлиткойНомерКолонки =
		(ТЦветовНомерСтроки - 1) % ТЦветовПлиткойКолКолонок + 1;
	ТЦветовПлиткойНомерКолонкиКакСтрока = Формат(ТЦветовПлиткойНомерКолонки, "ЧГ=");
	
	ТЦветовПлиткойИмя = Элементы.ТЦветовПлиткой.Имя;
	
	ТЦветовПлиткойПолеОбразецИмя =
		ТЦветовПлиткойИмя + "_Образец_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
	ТЦветовПлиткойПолеОбразец = Элементы[ТЦветовПлиткойПолеОбразецИмя];
	
	ТЦветовПлиткойЗначенияСвойств = Новый Структура;
	ТЦветовПлиткойЗначенияСвойств.Вставить("ТекущаяСтрока", ТЦветовПлиткойИДСтроки);
	ТЦветовПлиткойЗначенияСвойств.Вставить("ТекущийЭлемент", ТЦветовПлиткойПолеОбразец);
	ЗаполнитьЗначенияСвойств(Элементы.ТЦветовПлиткой, ТЦветовПлиткойЗначенияСвойств);
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ТЦветовПлиткой;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекЦветRGBПриИзменении(Элемент)
	ТекЦветПриИзменении(Элемент);
	НовыйТекЦвет = Новый Цвет(ТекЦветRGB_R, ТекЦветRGB_G, ТекЦветRGB_B);
	УстановитьНовыйТекЦвет(ЭтаФорма, НовыйТекЦвет, , Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ТекЦветHEXПриИзменении(Элемент)
	ТекЦветHEX = ИзвлечьИзСтрокиЧислоHEX(ТекЦветHEX);
	Если СтрДлина(ТекЦветHEX) = 6 Тогда
		НовыйТекЦвет = ЧислоHEXВЦвет(ТекЦветHEX);
	Иначе
		НовыйТекЦвет = Новый Цвет(0, 0, 0);
	КонецЕсли;
	УстановитьНовыйТекЦвет(ЭтаФорма, НовыйТекЦвет, , , Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ТекЦветCMYKПриИзменении(Элемент)
	
	ТекЦветПриИзменении(Элемент);
	
	НовыйТекЦвет =
		ПараметрыЦветаCMYKВЦвет(
			ТекЦветCMYK_C,
			ТекЦветCMYK_M,
			ТекЦветCMYK_Y,
			ТекЦветCMYK_K);
		
	УстановитьНовыйТекЦвет(
		ЭтаФорма,
		НовыйТекЦвет,
		,
		,
		,
		Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ТекЦветHSVПриИзменении(Элемент)
	
	ТекЦветПриИзменении(Элемент);
	
	НовыйТекЦвет =
		ПараметрыЦветаHSVВЦвет(
			ТекЦветHSV_H,
			ТекЦветHSV_S,
			ТекЦветHSV_V);
	
	УстановитьНовыйТекЦвет(
		ЭтаФорма,
		НовыйТекЦвет,
		,
		,
		,
		,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекЦветHSLПриИзменении(Элемент)
	
	ТекЦветПриИзменении(Элемент);
	
	НовыйТекЦвет =
		ПараметрыЦветаHSLВЦвет(
			ТекЦветHSL_H,
			ТекЦветHSL_S,
			ТекЦветHSL_L);
	
	УстановитьНовыйТекЦвет(ЭтаФорма,
		НовыйТекЦвет,
		,
		,
		,
		,
		,
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТЦветов

&НаКлиенте
Процедура ТЦветовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТЦветовТекДанные = Элементы.ТЦветов.ТекущиеДанные;
	Если ТЦветовТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не МножественныйВыбор Тогда
		
		ВыбратьИЗакрыть();
		
	Иначе
		
		ТЦветовНомерСтроки = ТЦветовТекДанные.НомерСтроки;
		ТЦветовНомерСтрокиКакСтрока = Формат(ТЦветовНомерСтроки, "ЧГ=");
		
		ТЦветовПлиткойНомерСтроки = Окр(ТЦветовНомерСтроки / ТЦветовПлиткойКолКолонок + 0.5, 0, 0);
		ТЦветовПлиткойНомерКолонки = (ТЦветовНомерСтроки - 1) % ТЦветовПлиткойКолКолонок + 1;
		ТЦветовПлиткойНомерКолонкиКакСтрока = Формат(ТЦветовПлиткойНомерКолонки, "ЧГ=");
		
		ТЦветовПлиткойРеквизитВыборИмя = "Выбор_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
		
		ТЦветовТекДанные.Выбор = Не ТЦветовТекДанные.Выбор;
		ТЦветовПлиткой[ТЦветовПлиткойНомерСтроки - 1][ТЦветовПлиткойРеквизитВыборИмя] = ТЦветовТекДанные.Выбор;
		
		ВыбранныйЦвет = ТЦветовТекДанные.Цвет;
		ВыбранныйЦветКлюч = ТекПалитраЦветов + " " + ТЦветовНомерСтрокиКакСтрока;
		
		Если ТЦветовТекДанные.Выбор Тогда
			ВыбранныеЦвета.Вставить(ВыбранныйЦветКлюч, ТЦветовТекДанные.Цвет);
		Иначе
			ВыбранныеЦвета.Удалить(ВыбранныйЦветКлюч);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЦветовПриАктивизацииСтроки(Элемент)
	
	Если ТЦветовПриАктивизацииСтрокиОтказ Тогда
		ТЦветовПриАктивизацииСтрокиОтказ = Ложь;
		Возврат;
	КонецЕсли;
	
	ТЦветовТекДанные = Элементы.ТЦветов.ТекущиеДанные;
	Если ТЦветовТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТЦветовПлиткойИмя = Элементы.ТЦветовПлиткой.Имя;
	
	ТЦветовНомерСтроки = ТЦветовТекДанные.НомерСтроки;
	ТЦветовПлиткойНомерСтроки = Окр(ТЦветовНомерСтроки / ТЦветовПлиткойКолКолонок + 0.5, 0, 0);
	ТЦветовПлиткойИндексСтроки = ТЦветовПлиткойНомерСтроки - 1;
	ТЦветовПлиткойИДСтроки = ТЦветовПлиткой[ТЦветовПлиткойИндексСтроки].ПолучитьИдентификатор();
	ТЦветовПлиткойНомерКолонки = (ТЦветовНомерСтроки - 1) % ТЦветовПлиткойКолКолонок + 1;
	ТЦветовПлиткойНомерКолонкиКакСтрока = Формат(ТЦветовПлиткойНомерКолонки, "ЧГ=");
	
	ТЦветовПлиткойПолеОбразецИмя = ТЦветовПлиткойИмя + "_Образец_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
	ТЦветовПлиткойПолеОбразец = Элементы[ТЦветовПлиткойПолеОбразецИмя];
	
	УстановитьНовыйТекЦвет(
		ЭтаФорма,
		ТЦветовТекДанные.Цвет);
	
	ТЦветовПлиткойПриАктивизацииЯчейкиОтказ = Истина;
	ТЦветовПлиткойЗначенияСвойств = Новый Структура;
	ТЦветовПлиткойЗначенияСвойств.Вставить("ТекущаяСтрока", ТЦветовПлиткойИДСтроки);
	ТЦветовПлиткойЗначенияСвойств.Вставить("ТекущийЭлемент", ТЦветовПлиткойПолеОбразец);
	ЗаполнитьЗначенияСвойств(Элементы.ТЦветовПлиткой, ТЦветовПлиткойЗначенияСвойств);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЦветовПриАктивизацииЯчейки(Элемент)
	
	Элементы.ТЦветов.ВыделенныеСтроки.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЦветовВыборПриИзменении(Элемент)
	
	ТЦветовТекДанные = Элементы.ТЦветов.ТекущиеДанные;
	Если ТЦветовТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТЦветовНомерСтроки = ТЦветовТекДанные.НомерСтроки;
	ТЦветовНомерСтрокиКакСтрока = Формат(ТЦветовНомерСтроки, "ЧГ=");
	
	ТЦветовПлиткойНомерСтроки =
		Окр(ТЦветовНомерСтроки / ТЦветовПлиткойКолКолонок + 0.5, 0, 0);
	ТЦветовПлиткойНомерКолонки =
		(ТЦветовНомерСтроки - 1) % ТЦветовПлиткойКолКолонок + 1;
	ТЦветовПлиткойНомерКолонкиКакСтрока = Формат(ТЦветовПлиткойНомерКолонки, "ЧГ=");
	
	ТЦветовПлиткойРеквизитВыборИмя = "Выбор_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
	ТЦветовПлиткойРеквизитЦветИмя = "Цвет_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
	
	ТЦветовПлиткой[ТЦветовПлиткойНомерСтроки - 1]
		[ТЦветовПлиткойРеквизитВыборИмя] = ТЦветовТекДанные.Выбор;
		
	ВыбранныйЦвет = ТЦветовТекДанные.Цвет;
	ВыбранныйЦветКлюч = ТекПалитраЦветов + " " + ТЦветовНомерСтрокиКакСтрока;
	
	Если ТЦветовТекДанные.Выбор Тогда
		ВыбранныеЦвета.Вставить(ВыбранныйЦветКлюч, ВыбранныйЦвет);
	Иначе
		ВыбранныеЦвета.Удалить(ВыбранныйЦветКлюч);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТЦветовПлиткой

&НаКлиенте
Процедура ТЦветовПлиткойВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТЦветовПлиткойТекДанные = Элементы.ТЦветовПлиткой.ТекущиеДанные;
	Если ТЦветовПлиткойТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не МножественныйВыбор Тогда
		
		ВыбратьИЗакрыть();
		
	Иначе
		
		ТЦветовПлиткойНомерСтроки = ТЦветовПлиткойТекДанные.НомерСтроки;
		ТЦветовПлиткойПоле = Элементы.ТЦветовПлиткой.ТекущийЭлемент;
		ТЦветовПлиткойНомерКолонкиКакСтрока = СтрРазделить(ТЦветовПлиткойПоле.Имя, "_")[2];
		ТЦветовПлиткойНомерКолонки = Число(ТЦветовПлиткойНомерКолонкиКакСтрока);
		ТЦветовПлиткойРеквизитВыборИмя = "Выбор_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
		ТЦветовПлиткойРеквизитЦветИмя = "Цвет_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
		
		ТЦветовНомерСтроки = (ТЦветовПлиткойНомерСтроки - 1)
			* ТЦветовПлиткойКолКолонок + ТЦветовПлиткойНомерКолонки;
		ТЦветовНомерСтрокиКакСтрока = Формат(ТЦветовНомерСтроки, "ЧГ=");
		
		ТЦветовПлиткойЦветВыбор = Не ТЦветовПлиткойТекДанные[ТЦветовПлиткойРеквизитВыборИмя];
		ТЦветовПлиткойТекДанные[ТЦветовПлиткойРеквизитВыборИмя] = ТЦветовПлиткойЦветВыбор;
		ТЦветов[ТЦветовНомерСтроки - 1].Выбор = ТЦветовПлиткойЦветВыбор;
		
		ВыбранныйЦвет = ТЦветовПлиткойТекДанные[ТЦветовПлиткойРеквизитЦветИмя];
		ВыбранныйЦветКлюч = ТекПалитраЦветов + " " + ТЦветовНомерСтрокиКакСтрока;
		
		Если ТЦветовПлиткойТекДанные[ТЦветовПлиткойРеквизитВыборИмя] Тогда
			ВыбранныеЦвета.Вставить(ВыбранныйЦветКлюч, ВыбранныйЦвет);
		Иначе
			ВыбранныеЦвета.Удалить(ВыбранныйЦветКлюч);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЦветовПлиткойПриАктивизацииЯчейки(Элемент)
	
	Элементы.ТЦветовПлиткой.ВыделенныеСтроки.Очистить();
	
	Если ТЦветовПлиткойПриАктивизацииЯчейкиОтказ Тогда
		ТЦветовПлиткойПриАктивизацииЯчейкиОтказ = Ложь;
		Возврат;
	КонецЕсли;
	
	ТЦветовПлиткойТекДанные = Элементы.ТЦветовПлиткой.ТекущиеДанные;
	
	Если ТЦветовПлиткойТекДанные <> Неопределено Тогда
		
		ТЦветовПлиткойНомерСтроки = ТЦветовПлиткойТекДанные.НомерСтроки;
		ТЦветовПлиткойПоле = Элементы.ТЦветовПлиткой.ТекущийЭлемент;
		ТЦветовПлиткойНомерКолонкиКакСтрока = СтрРазделить(ТЦветовПлиткойПоле.Имя, "_")[2];
		ТЦветовПлиткойНомерКолонки = Число(ТЦветовПлиткойНомерКолонкиКакСтрока);
		ТЦветовПлиткойРеквизитЦветИмя = "Цвет_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
		
		ТЦветовНомерСтроки = (ТЦветовПлиткойНомерСтроки - 1)
			* ТЦветовПлиткойКолКолонок + ТЦветовПлиткойНомерКолонки;
			
		Если ТЦветовНомерСтроки <= ТекПалитраЦветовКолЦветов Тогда
			
			ТЦветовИндексСтроки = ТЦветовНомерСтроки - 1;
			ТЦветовИДСтроки = ТЦветов[ТЦветовИндексСтроки].ПолучитьИдентификатор();
			
			НовыйТекЦвет = ТЦветовПлиткойТекДанные[ТЦветовПлиткойРеквизитЦветИмя];
			УстановитьНовыйТекЦвет(
				ЭтаФорма,
				НовыйТекЦвет);
			
			Если Элементы.ТЦветов.ТекущаяСтрока <> ТЦветовИДСтроки Тогда
				ТЦветовПриАктивизацииСтрокиОтказ = Истина;
				Элементы.ТЦветов.ТекущаяСтрока = ТЦветовИДСтроки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЦветовПлиткойВыборПриИзменении(Элемент)
	
	ТЦветовПлиткойТекДанные = Элементы.ТЦветовПлиткой.ТекущиеДанные;
	Если ТЦветовПлиткойТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТЦветовПлиткойПолеВыбор = Элемент;
	ТЦветовПлиткойПолеВыборИмя = ТЦветовПлиткойПолеВыбор.Имя;
	
	ТЦветовПлиткойНомерСтроки = ТЦветовПлиткойТекДанные.НомерСтроки;
	ТЦветовПлиткойНомерКолонки = Число(СтрРазделить(ТЦветовПлиткойПолеВыборИмя, "_")[2]);
	
	ТЦветовНомерСтроки = (ТЦветовПлиткойНомерСтроки - 1)
		* ТЦветовПлиткойКолКолонок + ТЦветовПлиткойНомерКолонки;
	ТЦветовНомерСтрокиКакСтрока = Формат(ТЦветовНомерСтроки, "ЧГ=");
	
	ТЦветовПлиткойПоле = Элементы.ТЦветовПлиткой.ТекущийЭлемент;
	ТЦветовПлиткойНомерКолонкиКакСтрока = СтрРазделить(ТЦветовПлиткойПоле.Имя, "_")[2];
	ТЦветовПлиткойРеквизитВыборИмя = "Выбор_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
	ТЦветовПлиткойРеквизитЦветИмя = "Цвет_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
	
	ТЦветовПлиткойЦветВыбор = ТЦветовПлиткойТекДанные[ТЦветовПлиткойРеквизитВыборИмя];
	ТЦветов[ТЦветовНомерСтроки - 1].Выбор = ТЦветовПлиткойЦветВыбор;
	
	ВыбранныйЦвет = ТЦветовПлиткойТекДанные[ТЦветовПлиткойРеквизитЦветИмя];
	ВыбранныйЦветКлюч = ТекПалитраЦветов + " " + ТЦветовНомерСтрокиКакСтрока;
	
	Если ТЦветовПлиткойЦветВыбор Тогда
		ВыбранныеЦвета.Вставить(ВыбранныйЦветКлюч, ВыбранныйЦвет);
	Иначе
		ВыбранныеЦвета.Удалить(ВыбранныйЦветКлюч);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыбрать(Команда)
	ВыбратьИЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаАктивизироватьПолеПоиска(Команда)
	ТекущийЭлемент = Элементы.ПолеПоиска;
КонецПроцедуры

&НаКлиенте
Процедура КомандаТЦветовУстановитьПометки(Команда)
	ТЦветовУстановитьЗначениеПометки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаТЦветовСнятьПометки(Команда)
	ТЦветовУстановитьЗначениеПометки(Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьТаблицуЦветовПлиткой()
	
	МассивНовыхРеквизитов = Новый Массив;
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповЦвет = Новый ОписаниеТипов("Цвет");
	ТЦветовПлиткойИмя = Элементы.ТЦветовПлиткой.Имя;
	ТЦветовПлиткойНавигация.Очистить();
	
	Для ТЦветовПлиткойНомерКолонки = 1 По ТЦветовПлиткойКолКолонок Цикл
		
		ТЦветовПлиткойРеквизитИмяШаблон = "%1_" + Формат(ТЦветовПлиткойНомерКолонки, "ЧГ=");
		
		Если МножественныйВыбор Тогда	
			
			ТЦветовПлиткойРеквизитВыборИмя = СтрШаблон(ТЦветовПлиткойРеквизитИмяШаблон, "Выбор");
			ТЦветовПлиткойРеквизитВыбор = Новый РеквизитФормы(
				ТЦветовПлиткойРеквизитВыборИмя, ОписаниеТиповБулево, ТЦветовПлиткойИмя);
				
			МассивНовыхРеквизитов.Добавить(ТЦветовПлиткойРеквизитВыбор);
				
		КонецЕсли;
		
		ТЦветовПлиткойРеквизитЦветИмя = СтрШаблон(ТЦветовПлиткойРеквизитИмяШаблон, "Цвет");
		ТЦветовПлиткойРеквизитЦвет = Новый РеквизитФормы(
			ТЦветовПлиткойРеквизитЦветИмя, ОписаниеТиповЦвет, ТЦветовПлиткойИмя);
		
		ТЦветовПлиткойРеквизитОбразецИмя = СтрШаблон(ТЦветовПлиткойРеквизитИмяШаблон, "Образец");
		ТЦветовПлиткойРеквизитОбразец = Новый РеквизитФормы(
			ТЦветовПлиткойРеквизитОбразецИмя, ОписаниеТиповСтрока, ТЦветовПлиткойИмя);
		
		МассивНовыхРеквизитов.Добавить(ТЦветовПлиткойРеквизитЦвет);
		МассивНовыхРеквизитов.Добавить(ТЦветовПлиткойРеквизитОбразец);
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивНовыхРеквизитов);
	
	ТипПолеФормы = Тип("ПолеФормы");
	ТипГруппаФормы = Тип("ГруппаФормы");
	
	Для ТЦветовПлиткойНомерКолонки = 1 По ТЦветовПлиткойКолКолонок Цикл
		
		ТЦветовПлиткойНомерКолонкиКакСтрока = Формат(ТЦветовПлиткойНомерКолонки, "ЧГ=");
		
		Если Не МножественныйВыбор Тогда
			
			ПолеФормыРодитель = Элементы.ТЦветовПлиткой;
			
		Иначе
			
			ПолеФормыРодитель = Элементы.Добавить(ТЦветовПлиткойИмя + "_ГруппаЯчейки_"
				+ ТЦветовПлиткойНомерКолонкиКакСтрока, ТипГруппаФормы, Элементы.ТЦветовПлиткой);
			ПолеФормыРодитель.Вид = ВидГруппыФормы.ГруппаКолонок;
			ПолеФормыРодитель.Группировка = ГруппировкаКолонок.ВЯчейке;
			ПолеФормыРодитель.ОтображатьВШапке = Ложь;
			
			ТЦветовПлиткойВыборРеквизитИмя = "Выбор_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
			ТЦветовПлиткойВыборПолеИмя = ТЦветовПлиткойИмя + "_" + ТЦветовПлиткойВыборРеквизитИмя;
			
			ТЦветовПлиткойПоле = Элементы.Добавить(ТЦветовПлиткойВыборПолеИмя, ТипПолеФормы,
				ПолеФормыРодитель);
			ТЦветовПлиткойПоле.Вид = ВидПоляФормы.ПолеФлажка;
			ТЦветовПлиткойПоле.ПутьКДанным =
				ТЦветовПлиткойИмя + "." + ТЦветовПлиткойВыборРеквизитИмя;
			ТЦветовПлиткойПоле.УстановитьДействие("ПриИзменении", "ТЦветовПлиткойВыборПриИзменении");
			
		КонецЕсли;
		
		ТЦветовПлиткойОбразецРеквизитИмя = "Образец_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
		ТЦветовПлиткойОбразецПолеИмя = ТЦветовПлиткойИмя + "_" + ТЦветовПлиткойОбразецРеквизитИмя;
		
		ТЦветовПлиткойПоле = Элементы.Добавить(ТЦветовПлиткойОбразецПолеИмя, ТипПолеФормы,
			ПолеФормыРодитель);
		ТЦветовПлиткойПоле.Вид = ВидПоляФормы.ПолеВвода;
		ТЦветовПлиткойПоле.ТолькоПросмотр = Истина;
		ТЦветовПлиткойПоле.ПутьКДанным = ТЦветовПлиткойИмя + "." + ТЦветовПлиткойОбразецРеквизитИмя;
		ТЦветовПлиткойПоле.Ширина = 1;
		ТЦветовПлиткойПоле.Высота = 3;
		ТЦветовПлиткойПоле.АвтоВысотаЯчейки = Ложь;
		ТЦветовПлиткойПоле.АвтоМаксимальнаяШирина = Ложь;
		ТЦветовПлиткойПоле.АвтоМаксимальнаяВысота = Ложь;
		ТЦветовПлиткойПоле.Шрифт = Новый Шрифт(, 8);
		ТЦветовПлиткойПоле.МногострочныйРежим = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокПалитр()
	
	ОбъектЗначение = ЭтаФорма.РеквизитФормыВЗначение("Объект");
	ОбъектМетаданные = ОбъектЗначение.Метаданные();
	
	ПалитраПрефикс = "Палитра";
	
	Для Каждого ОбъектМетаданныхМакетПалитрыЦветов Из ОбъектМетаданные.Макеты Цикл
		
		Если Не СтрНачинаетсяС(ОбъектМетаданныхМакетПалитрыЦветов.Имя, ПалитраПрефикс)
			Или ОбъектМетаданныхМакетПалитрыЦветов.Имя = ПалитраПрефикс Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.ТекПалитраЦветов.СписокВыбора.Добавить(
			ОбъектМетаданныхМакетПалитрыЦветов.Имя, ОбъектМетаданныхМакетПалитрыЦветов.Синоним);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИЗакрыть()
	
	Если Не МножественныйВыбор Тогда
		
		ОповеститьОВыборе(ТекЦвет);
		
	Иначе
		
		Результат = ПолучитьВыбранныеЦвета();
		ОповеститьОВыборе(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляАвтоподбора(
		ИскомыйТекст,
		ИмяТекПалитрыЦветов,
		ОбъектМетаданныхИмя,
		МаксимальноеКоличествоРезультатовПоиска)
	
	СписокНайденныхРезультатов = Новый СписокЗначений;
	
	ИскомыеСлова = СтрРазделить(ИскомыйТекст, " ", Ложь);
	
	Если ИскомыеСлова.Количество() = 0 Тогда
		Возврат СписокНайденныхРезультатов;
	ИначеЕсли ИскомыеСлова.Количество() = 1 Тогда
		ИскомыеСлова = ИскомыеСлова[0];
	КонецЕсли;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	ТаблицаНайденныхРезультатов = Новый ТаблицаЗначений;
	//ТаблицаНайденныхРезультатов.Колонки.Добавить("ДлинаСтроки", ТипЧисло);
	ТаблицаНайденныхРезультатов.Колонки.Добавить("КолНайденныхВхожденийПодстроки", ТипЧисло);
	ТаблицаНайденныхРезультатов.Колонки.Добавить("КолНайденныхУникальныхВхожденийПодстроки", ТипЧисло);
	ТаблицаНайденныхРезультатов.Колонки.Добавить("ПозицияПервогоВхождения", ТипЧисло);
	ТаблицаНайденныхРезультатов.Колонки.Добавить("МакетПалитрыНомерСтроки", ТипЧисло);
	ТаблицаНайденныхРезультатов.Колонки.Добавить("Значение", ТипСтрока);
	ТаблицаНайденныхРезультатов.Колонки.Добавить("Представление");
	
	ОбъектМетаданных = Метаданные.Обработки[ОбъектМетаданныхИмя];
	
	МакетыДляПоиска = Новый Массив;
	Для Каждого МетаданныеМакетПалитры Из ОбъектМетаданных.Макеты Цикл
		Если МетаданныеМакетПалитры.Имя = ИмяТекПалитрыЦветов Тогда
			МакетыДляПоиска.Вставить(0, МетаданныеМакетПалитры);
		Иначе
			МакетыДляПоиска.Добавить(МетаданныеМакетПалитры);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого МетаданныеМакетПалитры Из МакетыДляПоиска Цикл
		
		Если Не СтрНачинаетсяС(МетаданныеМакетПалитры.Имя, "Палитра") Тогда
			Продолжить;
		КонецЕсли;
		
		МакетПалитры = Обработки[ОбъектМетаданныхИмя].ПолучитьМакет(МетаданныеМакетПалитры.Имя);
		СтруктураМакетаПалитрыЦветов = ПолучитьСтруктуруМакетаПалитрыЦветов(МакетПалитры);
		
		Если СтруктураМакетаПалитрыЦветов = Неопределено
			Или Не СтруктураМакетаПалитрыЦветов.Свойство("НомерКолонкиНазвание") Тогда
			Продолжить;
		КонецЕсли;
		
		Для МакетПалитрыНомерСтроки = СтруктураМакетаПалитрыЦветов.НомерПервойСтроки
				По МакетПалитры.ВысотаТаблицы Цикл
			
			Название = МакетПалитры.Область(МакетПалитрыНомерСтроки,
				СтруктураМакетаПалитрыЦветов.НомерКолонкиНазвание).Текст;
			
			//ДлинаСтроки = 0;
			КолНайденныхВхожденийПодстроки = 0;
			КолНайденныхУникальныхВхожденийПодстроки = 0;
			ПозицияПервогоВхождения = 0;
			
			СтрНайтиРезультат =
				СтрокаНайтиИВыделитьОформлением(
					Название,
					ИскомыеСлова,
					Истина,
					,
					,
					,
					,
					,
					КолНайденныхВхожденийПодстроки,
					КолНайденныхУникальныхВхожденийПодстроки, 
					ПозицияПервогоВхождения);
			
			Если СтрНайтиРезультат = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Цвет = МакетПалитры.Область(МакетПалитрыНомерСтроки, 1).ЦветФона;
			
			Значение = МетаданныеМакетПалитры.Имя + " " + МакетПалитрыНомерСтроки;
			Представление =
				Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока("    ", , , Цвет),
					"  ",
					МетаданныеМакетПалитры.Синоним,
					": ",
					СтрНайтиРезультат);
			
			ТНайденныхРезультатовСтрока = ТаблицаНайденныхРезультатов.Добавить();
			//ТНайденныхРезультатовСтрока.ДлинаСтроки = ДлинаСтроки;
			ТНайденныхРезультатовСтрока.КолНайденныхВхожденийПодстроки = КолНайденныхВхожденийПодстроки;
			ТНайденныхРезультатовСтрока.КолНайденныхУникальныхВхожденийПодстроки =
				КолНайденныхУникальныхВхожденийПодстроки;
			ТНайденныхРезультатовСтрока.ПозицияПервогоВхождения = ПозицияПервогоВхождения;
			ТНайденныхРезультатовСтрока.МакетПалитрыНомерСтроки = МакетПалитрыНомерСтроки;
			ТНайденныхРезультатовСтрока.Значение = Значение;
			ТНайденныхРезультатовСтрока.Представление = Представление;
			
			Если ТаблицаНайденныхРезультатов.Количество() >= МаксимальноеКоличествоРезультатовПоиска Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаНайденныхРезультатов.Количество() >= МаксимальноеКоличествоРезультатовПоиска Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаНайденныхРезультатов.Сортировать("КолНайденныхУникальныхВхожденийПодстроки УБЫВ,
		|КолНайденныхВхожденийПодстроки, ПозицияПервогоВхождения, МакетПалитрыНомерСтроки");
	
	Для Каждого Строка Из ТаблицаНайденныхРезультатов Цикл
		СписокНайденныхРезультатов.Добавить(Строка.Значение, Строка.Представление);
	КонецЦикла;
	
	Возврат СписокНайденныхРезультатов;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьТекПалитруЦветов()
	
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	
	ТЦветов.Очистить();
	ТЦветовПлиткой.Очистить();
	
	ТекПалитраЦветовКолЦветов = 0;
	
	Если ПустаяСтрока(ТекПалитраЦветов) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеОбъекта = РеквизитФормыВЗначение("Объект");
	МакетПалитры = ЗначениеОбъекта.ПолучитьМакет(ТекПалитраЦветов);
	
	// Обработать исключение при отсутствии макета
	
	СтруктураМакетаПалитрыЦветов = ПолучитьСтруктуруМакетаПалитрыЦветов(МакетПалитры);
	
	Если СтруктураМакетаПалитрыЦветов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МакетПалитрыТЦветовВысота = МакетПалитры.ВысотаТаблицы - СтруктураМакетаПалитрыЦветов.НомерПервойСтроки + 1;
	
	//
	
	ТипЭлементОтбораКомпоновкиДанных = Тип("ЭлементОтбораКомпоновкиДанных");
	ПолеКомпоновкиДанныхТЦветовНомерСтроки = Новый ПолеКомпоновкиДанных("ТЦветов.НомерСтроки");
	ПолеКомпоновкиДанныхТЦветовОбразец = Новый ПолеКомпоновкиДанных("ТЦветовОбразец");
	ТЦветовНавигацияИстДанных = Новый ТабличныйДокумент;
	ТЦветовНавигацияОписаниеПалитрыЦветов = Новый Массив(МакетПалитрыТЦветовВысота);
	
	//
	
	ТЦветовПлиткойИмя = Элементы.ТЦветовПлиткой.Имя;
	ПолеКомпоновкиДанныхТЦветовПлиткойНомерСтроки =
		Новый ПолеКомпоновкиДанных("ТЦветовПлиткой.НомерСтроки");
	
	ТЦветовПлиткойНавигацияИстДанных = Новый ТабличныйДокумент;
	
	//
	
	ТЦветовНомерСтроки = 0;
	
	Для МакетПалитрыНомерСтроки = СтруктураМакетаПалитрыЦветов.НомерПервойСтроки По МакетПалитры.ВысотаТаблицы Цикл
		
		ТЦветовНомерСтроки = ТЦветовНомерСтроки + 1;
		
		ПалитраЦветовОбластьЦвет =
			МакетПалитры.Область(
				МакетПалитрыНомерСтроки,
				СтруктураМакетаПалитрыЦветов.НомерКолонкиЦвет);
				
		ПалитраЦветовЦвет = ПалитраЦветовОбластьЦвет.ЦветФона;
		
		МакетПалитрыОбластьНазвание =
			МакетПалитры.Область(
				МакетПалитрыНомерСтроки,
				СтруктураМакетаПалитрыЦветов.НомерКолонкиНазвание);
		
		ПалитраЦветовНазвание = МакетПалитрыОбластьНазвание.Текст;
		
		//
		
		ТЦветовСтрока = ТЦветов.Добавить();
		ТЦветовСтрока.НомерСтроки = ТЦветовНомерСтроки;
		ТЦветовСтрока.Цвет = ПалитраЦветовЦвет;
		ТЦветовСтрока.Название = ПалитраЦветовНазвание;
		
		ТЦветовЭлУслОформл = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
		ТЦветовЭлУслОформл.Оформление.УстановитьЗначениеПараметра("ЦветФона", ПалитраЦветовЦвет);
		ТЦветовЭлУслОформл.Поля.Элементы.Добавить().Поле = ПолеКомпоновкиДанныхТЦветовОбразец;
		ТЦветовЭлОтбораУслОформл = ТЦветовЭлУслОформл.Отбор.Элементы.Добавить(ТипЭлементОтбораКомпоновкиДанных);
		ТЦветовЭлОтбораУслОформл.ЛевоеЗначение = ПолеКомпоновкиДанныхТЦветовНомерСтроки;
		ТЦветовЭлОтбораУслОформл.ПравоеЗначение = ТЦветовНомерСтроки;
		
		ТЦветовОбратныйНомерСтроки = МакетПалитрыТЦветовВысота - ТЦветовНомерСтроки + 1;
		ТЦветовНавигацияИстДанных.Область(ТЦветовОбратныйНомерСтроки + 1, 2).Текст = 1;
		ТЦветовНавигацияОписаниеПалитрыЦветов[ТЦветовОбратныйНомерСтроки - 1] = ПалитраЦветовЦвет;
		
		//
		
		ТЦветовПлиткойНомерСтроки =
			Окр(ТЦветовНомерСтроки / ТЦветовПлиткойКолКолонок + 0.5, 0, 0);
		ТЦветовПлиткойНомерКолонки =
			(ТЦветовНомерСтроки - 1) % ТЦветовПлиткойКолКолонок + 1;
		ТЦветовПлиткойНомерКолонкиКакСтрока = Формат(ТЦветовПлиткойНомерКолонки, "ЧГ=");
		
		ЭтоНоваяСтрока = ТЦветовПлиткойНомерКолонки = 1;
		Если ЭтоНоваяСтрока Тогда
			ТЦветовПлиткойСтрока = ТЦветовПлиткой.Добавить();
			ТЦветовПлиткойСтрока.НомерСтроки = ТЦветовПлиткойНомерСтроки;
		КонецЕсли;
		
		ТЦветовПлиткойРеквизитЦветИмя = "Цвет_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
		ТЦветовПлиткойРеквизитОбразецИмя = "Образец_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
		ТЦветовПлиткойПолеОбразецИмя = ТЦветовПлиткойИмя + "_" + ТЦветовПлиткойРеквизитОбразецИмя;
		
		ТЦветовПлиткойСтрока[ТЦветовПлиткойРеквизитЦветИмя] = ПалитраЦветовЦвет;
		ТЦветовПлиткойСтрока[ТЦветовПлиткойРеквизитОбразецИмя] =
			СтрЗаменить(ПалитраЦветовНазвание, "-", " ");
		
		ПалитраЦветовЦветТекста = ИзменитьОтносительнуюЯркостьЦвета(ПалитраЦветовЦвет, 50);
		
		ТЦветовПлиткойЭлУслОформл = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
		ТЦветовПлиткойЭлУслОформл.Оформление.УстановитьЗначениеПараметра("ЦветФона", ПалитраЦветовЦвет);
		ТЦветовПлиткойЭлУслОформл.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ПалитраЦветовЦветТекста);
		ТЦветовПлиткойЭлУслОформл.Поля.Элементы.Добавить().Поле =
			Новый ПолеКомпоновкиДанных(ТЦветовПлиткойПолеОбразецИмя);
		ТЦветовПлиткойЭлОтбораУслОформл = ТЦветовПлиткойЭлУслОформл.Отбор.Элементы.Добавить(
			ТипЭлементОтбораКомпоновкиДанных);
		ТЦветовПлиткойЭлОтбораУслОформл.ЛевоеЗначение = ПолеКомпоновкиДанныхТЦветовПлиткойНомерСтроки;
		ТЦветовПлиткойЭлОтбораУслОформл.ПравоеЗначение = ТЦветовПлиткойНомерСтроки;
		
		ТЦветовПлиткойНавигацияИстДанных.Область(ТЦветовОбратныйНомерСтроки + 1,
			ТЦветовПлиткойНомерКолонки + 1).Текст = 1;
		
		//
		
		
		
	КонецЦикла;
	
	ТекПалитраЦветовКолЦветов = ТЦветовНомерСтроки;
	
	//
	
	ТЦветовНавигация.ИсточникДанных = ТЦветовНавигацияИстДанных.Область(1, 1,
		ТЦветовНавигацияИстДанных.ВысотаТаблицы, ТЦветовНавигацияИстДанных.ШиринаТаблицы);
	ТЦветовНавигация.ОписаниеПалитрыЦветов.УстановитьПалитру(ТЦветовНавигацияОписаниеПалитрыЦветов);
	
	//
	
	ТЦветовПлиткойПоследняяСтрокаКолПустыхЯчеек = (ТЦветовПлиткойКолКолонок
		- ТЦветовНомерСтроки % ТЦветовПлиткойКолКолонок)
		% ТЦветовПлиткойКолКолонок;
	
	Если ТЦветовПлиткойПоследняяСтрокаКолПустыхЯчеек Тогда
		
		ТЦветовПлиткойЭлУслОформл = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
		ТЦветовПлиткойЭлУслОформл.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		ТЦветовПлиткойЭлУслОформл.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		ТЦветовПлиткойЭлОтбораУслОформл =
			ТЦветовПлиткойЭлУслОформл.Отбор.Элементы.Добавить(ТипЭлементОтбораКомпоновкиДанных);
		ТЦветовПлиткойЭлОтбораУслОформл.ЛевоеЗначение = ПолеКомпоновкиДанныхТЦветовПлиткойНомерСтроки;
		ТЦветовПлиткойЭлОтбораУслОформл.ПравоеЗначение = ТЦветовПлиткойНомерСтроки;
		
		//
		
		ТЦветовПлиткойНавигацияИстДанныхТабДокПустыхЯчеек = Новый ТабличныйДокумент;
		
		ТЦветовПлиткойНомерКолонкиНачальный = ТЦветовПлиткойКолКолонок
			- ТЦветовПлиткойПоследняяСтрокаКолПустыхЯчеек + 1;
			
		Для ТЦветовПлиткойНомерКолонки = ТЦветовПлиткойНомерКолонкиНачальный
				По ТЦветовПлиткойКолКолонок Цикл
				
			ТЦветовПлиткойНомерКолонкиКакСтрока = Формат(ТЦветовПлиткойНомерКолонки, "ЧГ=");
			
			Если МножественныйВыбор Тогда
				
				ТЦветовПлиткойРеквизитВыборИмя = "Выбор_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
				ТЦветовПлиткойПолеВыборИмя =
					ТЦветовПлиткойИмя + "_" + ТЦветовПлиткойРеквизитВыборИмя;
				
				ТЦветовПлиткойЭлУслОформл.Поля.Элементы.Добавить().Поле =
					Новый ПолеКомпоновкиДанных(ТЦветовПлиткойПолеВыборИмя);
				
			КонецЕсли;
			
			ТЦветовПлиткойРеквизитОбразецИмя = "Образец_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
			ТЦветовПлиткойПолеОбразецИмя =
				ТЦветовПлиткойИмя + "_" + ТЦветовПлиткойРеквизитОбразецИмя;
			
			ТЦветовПлиткойЭлУслОформл.Поля.Элементы.Добавить().Поле =
				Новый ПолеКомпоновкиДанных(ТЦветовПлиткойПолеОбразецИмя);
				
			ТЦветовПлиткойНавигацияИстДанныхТабДокПустыхЯчеек.Область(
				1,
				ТЦветовПлиткойНомерКолонки + 1)
					.Текст = 1;
			
		КонецЦикла;
		
		ТЦветовПлиткойНавигацияИстДанныхОбластьПустыхЯчеек =
			ТЦветовПлиткойНавигацияИстДанныхТабДокПустыхЯчеек.Область(
				1,
				1,
				1,
				ТЦветовПлиткойКолКолонок + 1);
			
		ОбластьПриемник = 
			ТЦветовПлиткойНавигацияИстДанных.Область(
				2,
				1,
				2,
				ТЦветовПлиткойНавигацияИстДанных.ШиринаТаблицы);
				
		ТЦветовПлиткойНавигацияИстДанных.ВставитьОбласть(
			ТЦветовПлиткойНавигацияИстДанныхОбластьПустыхЯчеек,
			ОбластьПриемник,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
			
		ТЦветовНавигацияОписаниеПалитрыЦветов.Вставить(0, ЦветаСтиля.ЦветФонаФормы);
			
	КонецЕсли;
		
	ТЦветовПлиткойНавигация.ИсточникДанных = ТЦветовПлиткойНавигацияИстДанных.Область(1, 1,
		ТЦветовПлиткойНавигацияИстДанных.ВысотаТаблицы, ТЦветовПлиткойНавигацияИстДанных.ШиринаТаблицы);
	ТЦветовПлиткойНавигация.ОписаниеПалитрыЦветов.УстановитьПалитру(ТЦветовНавигацияОписаниеПалитрыЦветов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруМакетаПалитрыЦветов(МакетПалитры,
		ВызыватьИсключениеПриНарушенииСтруктурыПалитрыЦветов = Ложь)
	
	МакетПалитрыШапкаНомерСтроки = Неопределено;
	МакетПалитрыШапкаНомерПервойКолонки = Неопределено;
	Для МакетПалитрыНомерСтроки = 1 По МакетПалитры.ВысотаТаблицы Цикл
		Для МакетПалитрыНомерКолонки = 1 По МакетПалитры.ШиринаТаблицы Цикл
			МакетПалитрыОбласть = МакетПалитры.Область(МакетПалитрыНомерСтроки, МакетПалитрыНомерКолонки);
			МакетПалитрыОбластьТекст = НРег(СокрЛ(МакетПалитрыОбласть.Текст));
			Если СтрНачинаетсяС(МакетПалитрыОбластьТекст, "цвет")
				Или СтрНачинаетсяС(МакетПалитрыОбластьТекст, "название") Тогда
				МакетПалитрыШапкаНомерСтроки = МакетПалитрыНомерСтроки;
				МакетПалитрыШапкаНомерПервойКолонки = МакетПалитрыНомерКолонки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если МакетПалитрыШапкаНомерСтроки <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если МакетПалитрыШапкаНомерСтроки = Неопределено Тогда
		Если ВызыватьИсключениеПриНарушенииСтруктурыПалитрыЦветов Тогда
			ВызватьИсключениеПриНарушенииСтруктурыПалитрыЦветов(МакетПалитры);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;

	КодыЯзыковТекущейКонфигурации = Новый Массив;
	Для Каждого ОбъектМетаданныхЯзык Из Метаданные.Языки Цикл
		КодыЯзыковТекущейКонфигурации.Добавить(ОбъектМетаданныхЯзык.КодЯзыка);
	КонецЦикла;
	
	ТекущийЯзыкКодЯзыка = НРег(ТекущийЯзык().КодЯзыка);
	ИмяКолонкиНазваниеДляТекущегоЯзыка = "название " + ТекущийЯзыкКодЯзыка;
	
	СтруктураКолонокШапкиПалитры = Новый Структура;
	Для МакетПалитрыШапкаНомерКолонки = МакетПалитрыШапкаНомерПервойКолонки По МакетПалитры.ШиринаТаблицы Цикл
		МакетПалитрыШапкаОбласть =
			МакетПалитры.Область(МакетПалитрыШапкаНомерСтроки, МакетПалитрыШапкаНомерКолонки);
		МакетПалитрыШапкаОбластьТекст = НРег(СокрЛП(МакетПалитрыШапкаОбласть.Текст));
		Если Не СтруктураКолонокШапкиПалитры.Свойство("НомерКолонкиЦвет")
			И МакетПалитрыШапкаОбластьТекст = "цвет" Тогда
			СтруктураКолонокШапкиПалитры.Вставить("НомерКолонкиЦвет", МакетПалитрыШапкаНомерКолонки);
		ИначеЕсли Не СтруктураКолонокШапкиПалитры.Свойство("НомерКолонкиНазвание")
			И (МакетПалитрыШапкаОбластьТекст = "название"
			Или МакетПалитрыШапкаОбластьТекст = ИмяКолонкиНазваниеДляТекущегоЯзыка) Тогда
			СтруктураКолонокШапкиПалитры.Вставить("НомерКолонкиНазвание", МакетПалитрыШапкаНомерКолонки);
		КонецЕсли;
		Если СтруктураКолонокШапкиПалитры.Свойство("НомерКолонкиЦвет")
			И СтруктураКолонокШапкиПалитры.Свойство("НомерКолонкиНазвание") Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтруктураКолонокШапкиПалитры.Свойство("НомерКолонкиЦвет")
		Или Не СтруктураКолонокШапкиПалитры.Свойство("НомерКолонкиНазвание") Тогда
		Если ВызыватьИсключениеПриНарушенииСтруктурыПалитрыЦветов Тогда
			ВызватьИсключениеПриНарушенииСтруктурыПалитрыЦветов(МакетПалитры);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураМакетаПалитрыЦветов = СтруктураКолонокШапкиПалитры;
	СтруктураМакетаПалитрыЦветов.Вставить("НомерПервойСтроки", МакетПалитрыШапкаНомерСтроки + 1);
	
	Возврат СтруктураМакетаПалитрыЦветов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВызватьИсключениеПриНарушенииСтруктурыПалитрыЦветов(МакетПалитры)
	
	ТекстОшибки = "ru='В палитре ""%1"" не найдены данные. Возможно, структура палитры нарушена.'";
	СтрШаблон(ТекстОшибки, МакетПалитры.Синоним);
	ВызватьИсключение НСтр(ТекстОшибки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницу(Форма)
	
	НоваяТекСтраница = Форма.Элементы[Форма.РежимОтображения];
	Форма.Элементы.ГруппаПредставленияЦветовТекущейПалитры.ТекущаяСтраница = НоваяТекСтраница;
	Форма.ТекущийЭлемент = НоваяТекСтраница.ПодчиненныеЭлементы[0];
		
КонецПроцедуры

&НаКлиенте
Процедура ТЦветовУстановитьЗначениеПометки(ЗначениеПометки)
	
	Для ТЦветовНомерСтроки = 1 По ТЦветов.Количество() Цикл
		
		ТЦветовСтрока = ТЦветов[ТЦветовНомерСтроки - 1];
		ТЦветовСтрока.Выбор = ЗначениеПометки;
		
		ТЦветовПлиткойНомерСтроки =
			Окр(ТЦветовНомерСтроки / ТЦветовПлиткойКолКолонок + 0.5, 0, 0);
		ТЦветовПлиткойНомерКолонки = (ТЦветовНомерСтроки - 1) % ТЦветовПлиткойКолКолонок + 1;
		ТЦветовПлиткойНомерКолонкиКакСтрока = Формат(ТЦветовПлиткойНомерКолонки, "ЧГ=");
		
		ТЦветовПлиткойРеквизитВыборИмя = "Выбор_" + ТЦветовПлиткойНомерКолонкиКакСтрока;
		
		ТЦветовПлиткойСтрока = ТЦветовПлиткой[ТЦветовПлиткойНомерСтроки - 1];
		ТЦветовПлиткойСтрока[ТЦветовПлиткойРеквизитВыборИмя] = ЗначениеПометки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыбранныеЦвета()
	
	Результат = Новый Массив;
	
	Для Каждого ВыбранныеЦветаЭлемент Из ВыбранныеЦвета Цикл
		Результат.Добавить(ВыбранныеЦветаЭлемент.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНовыйТекЦвет(
		Форма,
		Цвет,
		НомерЦветаПП = Неопределено,
		ОбновитьRGB = Истина,
		ОбновитьHEX = Истина,
		ОбновитьCMYK = Истина,
		ОбновитьHSV = Истина,
		ОбновитьHSL = Истина)
	
	Если Форма.ТекЦвет = Цвет Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ТекЦвет = Цвет;
	
	ПротивоположныйЦвет100 = ИзменитьОтносительнуюЯркостьЦвета(Цвет, 100);
	ПротивоположныйЦвет50 = ИзменитьОтносительнуюЯркостьЦвета(Цвет, 50);
	
	Форма.Элементы.ОбразецЦветФона.ЦветФона = Цвет;
	Форма.Элементы.ОбразецЦветФона.ЦветТекста = ПротивоположныйЦвет100;
	
	Форма.Элементы.ОбразецЦветТекста.ЦветФона = ПротивоположныйЦвет100;
	Форма.Элементы.ОбразецЦветТекста.ЦветТекста = Цвет;
	
	Если ОбновитьRGB Тогда
		Форма.ТекЦветRGB_R = Цвет.Красный;
		Форма.ТекЦветRGB_G = Цвет.Зеленый;
		Форма.ТекЦветRGB_B = Цвет.Синий;
	КонецЕсли;
	
	Если ОбновитьHEX Тогда
		Форма.ТекЦветHEX = ЦветВЧислоHEX(Цвет);
	КонецЕсли;
	
	Если ОбновитьCMYK Тогда
		ЦветВПараметрыЦветаCMYK(
			Цвет,
			Форма.ТекЦветCMYK_C,
			Форма.ТекЦветCMYK_M,
			Форма.ТекЦветCMYK_Y,
			Форма.ТекЦветCMYK_K);
	КонецЕсли;
	
	Если ОбновитьHSV Тогда
		ЦветВПараметрыЦветаHSV(
			Цвет,
			Форма.ТекЦветHSV_H,
			Форма.ТекЦветHSV_S,
			Форма.ТекЦветHSV_V);
	КонецЕсли;
	
	Если ОбновитьHSL Тогда
		ЦветВПараметрыЦветаHSL(
			Цвет,
			Форма.ТекЦветHSL_H,
			Форма.ТекЦветHSL_S,
			Форма.ТекЦветHSL_L);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекЦветПриИзменении(Элемент)
	ТекЦветДанные = СтрРазделить(СтрЗаменить(Элемент.Имя, "ТекЦвет", ""), "_");
	СтрокаИменКомпонентЦвета = ТекЦветДанные[0];
	ИмяТекКомпонента = ТекЦветДанные[1];
	ТекКомпонентаИмя = "ТекЦвет" + СтрокаИменКомпонентЦвета + "_" + ИмяТекКомпонента;
	ТекКомпонентСвязь = ЭтаФорма[ТекКомпонентаИмя + "_Связь"];
	Если ТекКомпонентСвязь Тогда
		Коэф = ЭтаФорма[ТекКомпонентаИмя] / Элемент.МаксимальноеЗначение;
		Для НомерСимвола = 1 По СтрДлина(СтрокаИменКомпонентЦвета) Цикл
			ИмяКомпонентаЦвета = Сред(СтрокаИменКомпонентЦвета, НомерСимвола, 1);
			Если ИмяКомпонентаЦвета = ИмяТекКомпонента Тогда
				Продолжить;
			КонецЕсли;
			Если ЭтаФорма["ТекЦвет" + СтрокаИменКомпонентЦвета + "_" + ИмяКомпонентаЦвета + "_Связь"] Тогда
				КомпонентаИмя = "ТекЦвет" + СтрокаИменКомпонентЦвета + "_" + ИмяКомпонентаЦвета;
				ЭтаФорма[КомпонентаИмя] = Элементы[КомпонентаИмя].МаксимальноеЗначение * Коэф;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИзвлечьИзСтрокиЧислоHEX(Строка)
	Результат = "";
	СтрокаВРег = ВРег(Строка);
	Для НомерСимвола = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(СтрокаВРег, НомерСимвола, 1);
		Если "0" <= Символ И Символ <= "9" Или "A" <= Символ И Символ <= "F" Тогда
			Результат = Результат + Символ;
		КонецЕсли; 
	КонецЦикла;
	Для НомерСимвола = 1 По 6 - СтрДлина(Результат) Цикл
		Результат = Результат + "0";
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоHEXВЦвет(ЧислоHEX)
	R = ЧислоHEXВЧисло(Лев(ЧислоHEX, 2));
	G = ЧислоHEXВЧисло(Сред(ЧислоHEX, 3, 2));
	B = ЧислоHEXВЧисло(Сред(ЧислоHEX, 5, 2));
	Результат = Новый Цвет(R, G, B);
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоHEXВЧисло(ЧислоHEX)
	ВремЧислоHEX = ВРег(ЧислоHEX);
	Длина = СтрДлина(ВремЧислоHEX);
	Результат = 0;
	Для НомерСимвола = 1 По Длина Цикл
		Позиция = СтрНайти("0123456789ABCDEF", Сред(ВремЧислоHEX, НомерСимвола, 1));
		Результат = Результат + (Позиция - 1) * Pow(16, Длина - НомерСимвола);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЦветаCMYKВЦвет(C, M, Y, K)
	R = Окр(255 * (1 - C / 100) * (1 - K / 100));
	G = Окр(255 * (1 - M / 100) * (1 - K / 100));
	B = Окр(255 * (1 - Y / 100) * (1 - K / 100));
	Результат = Новый Цвет(R, G, B);
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЦветаHSVВЦвет(H, S, V)
	S_ = S / 100;
	V_ = V / 100;
	C = V_ * S_;
	p = H / 60 % 2 - 1;
	p = Макс(p, - p);
	X = C * (1 - p);
	m = V_ - C;
	R_ = 0;
	G_ = 0;
	B_ = 0;
	Если 0 <= H И H < 60 Тогда
		R_ = C;
		G_ = X;
	ИначеЕсли 60 <= H И H < 120 Тогда
		R_ = X;
		G_ = C;
	ИначеЕсли 120 <= H И H < 180 Тогда
		G_ = C;
		B_ = X;
	ИначеЕсли 180 <= H И H < 240 Тогда
		G_ = X;
		B_ = C;
	ИначеЕсли 240 <= H И H < 300 Тогда
		R_ = X;
		B_ = C;
	ИначеЕсли 300 <= H И H < 360 Тогда
		R_ = C;
		B_ = X;
	КонецЕсли;
	R = Окр((R_ + m) * 255);
	G = Окр((G_ + m) * 255);
	B = Окр((B_ + m) * 255);
	ЦветRGB = Новый Цвет(R, G, B);
	Возврат ЦветRGB;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЦветаHSLВЦвет(H, S, L)
	S_ = S / 100;
	L_ = L / 100;
	p1 = 2 * L_ - 1;
	p1 = Макс(p1, - p1);
	C = (1 - p1) * S_;
	p2 = H / 60 % 2 - 1;
	p2 = Макс(p2, - p2);
	X = C * (1 - p2);
	m = L_ - C / 2;
	R_ = 0;
	G_ = 0;
	B_ = 0;
	Если 0 <= H И H < 60 Тогда
		R_ = C;
		G_ = X;
	ИначеЕсли 60 <= H И H < 120 Тогда
		R_ = X;
		G_ = C;
	ИначеЕсли 120 <= H И H < 180 Тогда
		G_ = C;
		B_ = X;
	ИначеЕсли 180 <= H И H < 240 Тогда
		G_ = X;
		B_ = C;
	ИначеЕсли 240 <= H И H < 300 Тогда
		R_ = X;
		B_ = C;
	ИначеЕсли 300 <= H И H < 360 Тогда
		R_ = C;
		B_ = X;
	КонецЕсли;
	R = Окр((R_ + m) * 255);
	G = Окр((G_ + m) * 255);
	B = Окр((B_ + m) * 255);
	ЦветRGB = Новый Цвет(R, G, B);
	Возврат ЦветRGB;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаНайтиИВыделитьОформлением(
		Строка,
		Подстрока,
		НечеткийПоиск = Ложь,
		Знач ШрифтНайденнойПодстроки = Неопределено,
		Знач ЦветТекстаНайденнойПодстроки = Неопределено,
		Знач ЦветФонаНайденнойПодстроки = Неопределено,
		СтрокаСлеваОтНайденнойПодстроки = Неопределено,
		СтрокаСправаОтНайденнойПодстроки = Неопределено,
		КоличествоНайденныхВхожденийПодстроки = Неопределено,
		КоличествоНайденныхУникальныхВхожденийПодстроки = Неопределено,
		ПозицияПервогоВхожденияПодстроки = Неопределено)
	
	ПодстрокаЭтоМассив = ТипЗнч(Подстрока) = Тип("Массив");
	Если Не ПодстрокаЭтоМассив Тогда
		ИскомыеПодстроки = Новый Массив;
		ИскомыеПодстроки.Добавить(Подстрока);
		ИскомыеПодстрокиВГраница = 0;
	Иначе
		ИскомыеПодстроки = Подстрока;
		ИскомыеПодстрокиВГраница = ИскомыеПодстроки.ВГраница();
	КонецЕсли;
	
	СтрокаНРег = НРег(Строка);
	ЧастиРезультирующейСтрокиПозиции = Новый СписокЗначений;
	
	ВремКоличествоНайденныхВхожденийПодстроки = 0;
	ВремКоличествоНайденныхУникальныхВхожденийПодстроки = 0;
	
	Если ШрифтНайденнойПодстроки = Неопределено Тогда
		ШрифтНайденнойПодстроки = Новый Шрифт(, , Истина);
	КонецЕсли;
	Если ЦветТекстаНайденнойПодстроки = Неопределено Тогда
		ЦветТекстаНайденнойПодстроки = БНСП_ОбщМетодыКлиентСерверПовтИсп.ПолучитьЦветСтиляЦветАкцента();
	КонецЕсли;
	
	СтрокаДлина = СтрДлина(Строка);
	//ВремПозицияПервогоВхожденияПодстроки = СтрокаДлина;
	
	Для ИскомаяПодстрокаИндекс = 0 По ИскомыеПодстрокиВГраница Цикл
		
		ИскомаяПодстрока = ИскомыеПодстроки[ИскомаяПодстрокаИндекс];
		ИскомаяПодстрокаНРег = НРег(ИскомаяПодстрока);
		ИскомаяПодстрокаПозиция = СтрНайти(СтрокаНРег, ИскомаяПодстрокаНРег);
		
		//ВремПозицияПервогоВхожденияПодстроки = ИскомаяПодстрокаПозиция;
		
		Если ИскомаяПодстрокаПозиция = 0 Тогда
			Если НечеткийПоиск Тогда
				Продолжить;
			КонецЕсли;
			Возврат Неопределено;
		КонецЕсли;
		
		ВремКоличествоНайденныхУникальныхВхожденийПодстроки = ВремКоличествоНайденныхУникальныхВхожденийПодстроки + 1;
		
		ИскомаяПодстрокаДлина = СтрДлина(ИскомаяПодстрока);
		СтрокаЧастьБезПодстрокиПозиция = 1;
		
		Пока ИскомаяПодстрокаПозиция > 0 Цикл
			ВремКоличествоНайденныхВхожденийПодстроки = ВремКоличествоНайденныхВхожденийПодстроки + 1;
			
			// для чего это условие Если?
			Если СтрокаЧастьБезПодстрокиПозиция <= ИскомаяПодстрокаПозиция Тогда
				СтрокаЧастьБезПодстрокиДлина = ИскомаяПодстрокаПозиция - СтрокаЧастьБезПодстрокиПозиция;
				СтрокаЧастьБезПодстроки = Сред(Строка, СтрокаЧастьБезПодстрокиПозиция, СтрокаЧастьБезПодстрокиДлина);
				ЧастиРезультирующейСтрокиПозиции.Добавить(СтрокаЧастьБезПодстрокиПозиция, СтрокаЧастьБезПодстроки);
			КонецЕсли;
			
			ИскомаяПодстрокаВСтроке = Сред(Строка, ИскомаяПодстрокаПозиция, ИскомаяПодстрокаДлина);
			ИскомаяПодстрокаВСтрокеФорматированная = Новый ФорматированнаяСтрока(ИскомаяПодстрокаВСтроке,
				ШрифтНайденнойПодстроки, ЦветТекстаНайденнойПодстроки, ЦветФонаНайденнойПодстроки);
			Если СтрокаСлеваОтНайденнойПодстроки <> Неопределено Тогда
				ИскомаяПодстрокаВСтрокеФорматированная = Новый ФорматированнаяСтрока(
					СтрокаСлеваОтНайденнойПодстроки, ИскомаяПодстрокаВСтрокеФорматированная);
			КонецЕсли;
			Если СтрокаСправаОтНайденнойПодстроки <> Неопределено Тогда
				ИскомаяПодстрокаВСтрокеФорматированная = Новый ФорматированнаяСтрока(
					ИскомаяПодстрокаВСтрокеФорматированная, СтрокаСправаОтНайденнойПодстроки);
			КонецЕсли;
			
			ЧастиРезультирующейСтрокиПозиции.Добавить(ИскомаяПодстрокаПозиция, ИскомаяПодстрокаВСтрокеФорматированная);
			
			СтрокаЧастьБезПодстрокиПозиция = ИскомаяПодстрокаПозиция + ИскомаяПодстрокаДлина;
			Если СтрокаЧастьБезПодстрокиПозиция > СтрокаДлина Тогда
				Прервать;
			КонецЕсли;
			
			ИскомаяПодстрокаПозиция = СтрНайти(СтрокаНРег, ИскомаяПодстрокаНРег, , СтрокаЧастьБезПодстрокиПозиция);
		КонецЦикла;
		
		Если СтрокаЧастьБезПодстрокиПозиция <= СтрокаДлина Тогда
			СтрокаЧастьБезПодстроки = Сред(Строка, СтрокаЧастьБезПодстрокиПозиция);
			ЧастиРезультирующейСтрокиПозиции.Добавить(СтрокаЧастьБезПодстрокиПозиция, СтрокаЧастьБезПодстроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВремКоличествоНайденныхУникальныхВхожденийПодстроки = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли ВремКоличествоНайденныхУникальныхВхожденийПодстроки > 1 Тогда
		ЧастиРезультирующейСтрокиПозиции.СортироватьПоЗначению();
	КонецЕсли;
	
	//ПозицияПервогоВхождения = 0;
	
	//Если ЧастиРезультирующейСтрокиПозиции[1].Значение = 1
	
	ЧастиРезультирующейСтроки = Новый Массив;
	Для Каждого ИскомаяПодстрокаПозицииЭлемент Из ЧастиРезультирующейСтрокиПозиции Цикл
		ЧастиРезультирующейСтроки.Добавить(ИскомаяПодстрокаПозицииЭлемент.Представление);
	КонецЦикла;
	
	//ДлинаСтроки = СтрокаДлина;
	КоличествоНайденныхВхожденийПодстроки = ВремКоличествоНайденныхВхожденийПодстроки;
	КоличествоНайденныхУникальныхВхожденийПодстроки = ВремКоличествоНайденныхУникальныхВхожденийПодстроки;
	//ПозицияПервогоВхожденияПодстроки = ВремПозицияПервогоВхожденияПодстроки;
	
	РезультирующаяСтрока = Новый ФорматированнаяСтрока(ЧастиРезультирующейСтроки);
	Возврат РезультирующаяСтрока;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзменитьОтносительнуюЯркостьЦвета(
		Цвет,
		Знач ПроцентОтличия = 100)
	
	ПроцентОтличия = Мин(Макс(ПроцентОтличия, 0), 100);
	//ПерспективнаяЯркость = (0.299 * Цвет.Красный + 0.587 * Цвет.Зеленый + 0.114 * Цвет.Синий) / 255;
	ПерспективнаяЯркость = (Цвет.Красный * 0.2126 + Цвет.Зеленый * 0.7152 + Цвет.Синий * 0.0722) / 255;
	Если ПерспективнаяЯркость > 0.5 Тогда
		Сдвиг = 1 - ПроцентОтличия / 100;
		R = Окр(Цвет.Красный * Сдвиг);
		G = Окр(Цвет.Зеленый * Сдвиг);
		B = Окр(Цвет.Синий * Сдвиг);
	Иначе
		Сдвиг = ПроцентОтличия / 100;
		R = Мин(Окр((Цвет.Красный + 255) * Сдвиг), 255);
		G = Мин(Окр((Цвет.Зеленый + 255) * Сдвиг), 255);
		B = Мин(Окр((Цвет.Синий + 255) * Сдвиг), 255)
	КонецЕсли;
	
	НовыйЦвет = Новый Цвет(R, G, B);
	
	Возврат НовыйЦвет;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветВЧислоHEX(Цвет)
	Результат = ДобавитьЛидирующиеСимволы(ЧислоВЧислоHEX(Цвет.Красный), 2, "0")
	+ ДобавитьЛидирующиеСимволы(ЧислоВЧислоHEX(Цвет.Зеленый), 2, "0")
	+ ДобавитьЛидирующиеСимволы(ЧислоВЧислоHEX(Цвет.Синий), 2, "0");
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоВЧислоHEX(Число)
	ВремЧисло = Число;
	Результат = "";
	Пока ВремЧисло <> 0 Цикл
		Результат = Сред("0123456789ABCDEF", ВремЧисло % 16 + 1, 1) + Результат;
		ВремЧисло = Цел(ВремЧисло / 16);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьЛидирующиеСимволы(
		Строка,
		Длина,
		Символ)
	
	Результат = "";
	
	КолДобавляемыхЛидирующихСимволов = Длина - СтрДлина(Строка);
	Для НомерЛидирующегоСимвола = 1 По КолДобавляемыхЛидирующихСимволов Цикл
		Результат = Символ + Результат;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЦветВПараметрыЦветаCMYK(ЦветRGB, C = 0, M = 0, Y = 0, K = 0)
	R = ЦветRGB.Красный;
	G = ЦветRGB.Зеленый;
	B = ЦветRGB.Синий;
	K_ = 1 - Макс(R, G, B) / 255;
	Если K_ = 1 Тогда
		C = 0;
		M = 0;
		Y = 0;
	Иначе
		C = Окр((1 - R / 255 - K_) / (1 - K_) * 100);
		M = Окр((1 - G / 255 - K_) / (1 - K_) * 100);
		Y = Окр((1 - B / 255 - K_) / (1 - K_) * 100);
	КонецЕсли;
	K = Окр(K_ * 100);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЦветВПараметрыЦветаHSV(ЦветRGB, H = 0, S = 0, V = 0)
	R_ = ЦветRGB.Красный;
	G_ = ЦветRGB.Зеленый;
	B_ = ЦветRGB.Синий;
	Cmax = Макс(R_, G_, B_);
	Cmin = Мин(R_, G_, B_);
	d = Cmax - Cmin;
	Если d = 0 Тогда
		H_ = 0;
	ИначеЕсли Cmax = R_ Тогда
		H_ = 60 * ((G_ - B_) / d % 6);
	ИначеЕсли Cmax = G_ Тогда
		H_ = 60 * ((B_ - R_) / d + 2);
	Иначе
		H_ = 60 * ((R_ - G_) / d + 4);
	КонецЕсли;
	H = ?(H_ < 0, H_ + 360, H_);
	S = ?(Cmax = 0, 0, d / Cmax) * 100;
	V = Cmax / 255 * 100;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЦветВПараметрыЦветаHSL(ЦветRGB, H = 0, S = 0, L = 0)
	R_ = ЦветRGB.Красный / 255;
	G_ = ЦветRGB.Зеленый / 255;
	B_ = ЦветRGB.Синий / 255;
	Cmax = Макс(R_, G_, B_);
	Cmin = Мин(R_, G_, B_);
	d = Cmax - Cmin;
	Если d = 0 Тогда
		H_ = 0;
	ИначеЕсли Cmax = R_ Тогда
		H_ = 60 * ((G_ - B_) / d % 6);
	ИначеЕсли Cmax = G_ Тогда
		H_ = 60 * ((B_ - R_) / d + 2);
	Иначе
		H_ = 60 * ((R_ - G_) / d + 4);
	КонецЕсли;
	H = ?(H_ < 0, H_ + 360, H_);
	L_ = (Cmax + Cmin) / 2;
	p = 2 * L_ - 1;
	p = Макс(p, - p);
	dp = (1 - p);
	S = ?(dp = 0, 0, d / dp) * 100;
	L = L_ * 100;
КонецПроцедуры

#КонецОбласти
